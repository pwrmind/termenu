use std::{
    env,
    fs::{self, File},
    io::{self, Write},
    path::{Path, PathBuf},
    error::Error,
    process::Command,
};

enum Clipboard {
    Empty,
    Copy(PathBuf),
    Cut(PathBuf),
}

struct AppState {
    current_dir: PathBuf,
    clipboard: Clipboard,
}

fn main() -> Result<(), Box<dyn Error>> {
    let mut state = AppState {
        current_dir: env::current_dir()?,
        clipboard: Clipboard::Empty,
    };

    loop {
        if let Err(e) = show_menu(&mut state) {
            eprintln!("–û—à–∏–±–∫–∞: {}", e);
            wait_for_enter();
        }
    }
}

fn show_menu(state: &mut AppState) -> Result<(), Box<dyn Error>> {
    let mut entries = vec![];

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    if let Some(parent) = state.current_dir.parent() {
        entries.push(("..".to_string(), true, parent.to_path_buf()));
    }

    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    for entry in fs::read_dir(&state.current_dir)? {
        let entry = entry?;
        let path = entry.path();
        let is_dir = path.is_dir();
        let name = entry.file_name().to_string_lossy().to_string();
        entries.push((name, is_dir, path));
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∏, –ø–æ—Ç–æ–º —Ñ–∞–π–ª—ã
    entries.sort_by(|a, b| {
        b.1.cmp(&a.1) // –°–Ω–∞—á–∞–ª–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            .then_with(|| a.0.cmp(&b.0)) // –ó–∞—Ç–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    });

    // –û—á–∏—â–∞–µ–º —ç–∫—Ä–∞–Ω
    clear_screen();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–ª–µ–±–Ω—ã–µ –∫—Ä–æ—à–∫–∏
    show_breadcrumbs(&state.current_dir);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –±—É—Ñ–µ—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø—É—Å—Ç
    if !matches!(&state.clipboard, Clipboard::Empty) {
        show_clipboard_status(&state.clipboard);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
    for (i, (name, is_dir, _)) in entries.iter().enumerate() {
        let emoji = if *is_dir { "üìÅ" } else { "üìÑ" };
        println!("[{}] {} {}", i, emoji, name);
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    println!("\n–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—É–Ω–∫—Ç –≤—Å—Ç–∞–≤–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—É—Ñ–µ—Ä –Ω–µ –ø—É—Å—Ç
    if !matches!(&state.clipboard, Clipboard::Empty) {
        println!("[p] –í—Å—Ç–∞–≤–∏—Ç—å –∏–∑ –±—É—Ñ–µ—Ä–∞");
        println!("[c] –û—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä");
    }
    
    println!("[n] –°–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É");
    println!("[f] –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª");
    println!("[q] –í—ã—Ö–æ–¥");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
    print!("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É: ");
    io::stdout().flush()?;
    let mut input = String::new();
    io::stdin().read_line(&mut input)?;
    let input = input.trim();

    match input {
        "q" => std::process::exit(0),
        "p" => {
            if !matches!(&state.clipboard, Clipboard::Empty) {
                paste_from_clipboard(state)?;
                wait_for_enter();
            } else {
                println!("–ë—É—Ñ–µ—Ä –ø—É—Å—Ç!");
                wait_for_enter();
            }
        }
        "c" => {
            if !matches!(&state.clipboard, Clipboard::Empty) {
                state.clipboard = Clipboard::Empty;
                println!("–ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω");
                wait_for_enter();
            } else {
                println!("–ë—É—Ñ–µ—Ä —É–∂–µ –ø—É—Å—Ç!");
                wait_for_enter();
            }
        }
        "n" => {
            create_directory(state)?;
            wait_for_enter();
        }
        "f" => {
            create_file(state)?;
            wait_for_enter();
        }
        _ => {
            if let Ok(index) = input.parse::<usize>() {
                if let Some((_, is_dir, path)) = entries.get(index) {
                    if *is_dir {
                        state.current_dir = path.clone();
                    } else {
                        file_menu(state, path)?;
                    }
                } else {
                    println!("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å!");
                    wait_for_enter();
                }
            } else {
                println!("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {}", input);
                wait_for_enter();
            }
        }
    }

    Ok(())
}

fn file_menu(state: &mut AppState, file_path: &Path) -> Result<(), Box<dyn Error>> {
    let file_name = file_path.file_name().unwrap().to_string_lossy();

    loop {
        clear_screen();
        println!("–§–∞–π–ª: {}", file_name);
        println!("[1] –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å");
        println!("[2] –í—ã—Ä–µ–∑–∞—Ç—å");
        println!("[3] –£–¥–∞–ª–∏—Ç—å");
        println!("[4] –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å");
        println!("[5] –û—Ç–∫—Ä—ã—Ç—å");
        
        print!("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (b - –Ω–∞–∑–∞–¥): ");
        io::stdout().flush()?;
        
        let mut input = String::new();
        io::stdin().read_line(&mut input)?;
        let input = input.trim();

        match input {
            "1" => {
                state.clipboard = Clipboard::Copy(file_path.to_path_buf());
                println!("–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä");
                wait_for_enter();
                return Ok(());
            }
            "2" => {
                state.clipboard = Clipboard::Cut(file_path.to_path_buf());
                println!("–§–∞–π–ª –≤—ã—Ä–µ–∑–∞–Ω");
                wait_for_enter();
                return Ok(());
            }
            "3" => {
                fs::remove_file(file_path)?;
                println!("–§–∞–π–ª —É–¥–∞–ª–µ–Ω");
                wait_for_enter();
                return Ok(());
            }
            "4" => {
                print!("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ");
                io::stdout().flush()?;
                
                let mut new_name = String::new();
                io::stdin().read_line(&mut new_name)?;
                let new_name = new_name.trim();
                
                let new_path = file_path.with_file_name(new_name);
                fs::rename(file_path, &new_path)?;
                
                println!("–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω");
                wait_for_enter();
                return Ok(());
            }
            "5" => {
                open_file(file_path)?;
                wait_for_enter();
            }
            "b" => return Ok(()),
            _ => {
                println!("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥!");
                wait_for_enter();
            }
        }
    }
}

fn paste_from_clipboard(state: &mut AppState) -> Result<(), Box<dyn Error>> {
    match &state.clipboard {
        Clipboard::Copy(src) => {
            let file_name = src.file_name().unwrap();
            let dest = state.current_dir.join(file_name);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if dest.exists() {
                println!("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                return Ok(());
            }
            
            fs::copy(src, &dest)?;
            println!("–§–∞–π–ª —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {}", dest.display());
        }
        Clipboard::Cut(src) => {
            let file_name = src.file_name().unwrap();
            let dest = state.current_dir.join(file_name);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if dest.exists() {
                println!("–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                return Ok(());
            }
            
            fs::rename(src, &dest)?;
            state.clipboard = Clipboard::Empty;
            println!("–§–∞–π–ª –ø–µ—Ä–µ–º–µ—â–µ–Ω: {}", dest.display());
        }
        Clipboard::Empty => {
            println!("–ë—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –ø—É—Å—Ç!");
        }
    }
    Ok(())
}

fn show_clipboard_status(clipboard: &Clipboard) {
    match clipboard {
        Clipboard::Copy(path) => {
            let name = path.file_name().unwrap_or_default().to_string_lossy();
            println!("üìã –ë—É—Ñ–µ—Ä: –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ '{}'", name);
        }
        Clipboard::Cut(path) => {
            let name = path.file_name().unwrap_or_default().to_string_lossy();
            println!("üìã –ë—É—Ñ–µ—Ä: –í—ã—Ä–µ–∑–∞–Ω–∏–µ '{}'", name);
        }
        Clipboard::Empty => {}
    }
    println!();
}

fn create_directory(state: &mut AppState) -> Result<(), Box<dyn Error>> {
    clear_screen();
    println!("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞–ø–∫–∏ –≤: {}", state.current_dir.display());
    print!("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–∞–ø–∫–∏: ");
    io::stdout().flush()?;
    
    let mut dir_name = String::new();
    io::stdin().read_line(&mut dir_name)?;
    let dir_name = dir_name.trim();
    
    if dir_name.is_empty() {
        println!("–ò–º—è –ø–∞–ø–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        return Ok(());
    }
    
    let new_dir = state.current_dir.join(dir_name);
    if new_dir.exists() {
        println!("–ü–∞–ø–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        return Ok(());
    }
    
    fs::create_dir(&new_dir)?;
    println!("–ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {}", new_dir.display());
    Ok(())
}

fn create_file(state: &mut AppState) -> Result<(), Box<dyn Error>> {
    clear_screen();
    println!("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –≤: {}", state.current_dir.display());
    print!("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ");
    io::stdout().flush()?;
    
    let mut file_name = String::new();
    io::stdin().read_line(&mut file_name)?;
    let file_name = file_name.trim();
    
    if file_name.is_empty() {
        println!("–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!");
        return Ok(());
    }
    
    let new_file = state.current_dir.join(file_name);
    if new_file.exists() {
        println!("–§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
        return Ok(());
    }
    
    File::create(&new_file)?;
    println!("–§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {}", new_file.display());
    Ok(())
}

fn open_file(path: &Path) -> Result<(), Box<dyn Error>> {
    #[cfg(target_os = "windows")]
    Command::new("cmd")
        .args(["/C", "start", "", path.to_str().unwrap()])
        .spawn()?;

    #[cfg(target_os = "macos")]
    Command::new("open")
        .arg(path)
        .spawn()?;

    #[cfg(target_os = "linux")]
    Command::new("xdg-open")
        .arg(path)
        .spawn()?;

    Ok(())
}

fn show_breadcrumbs(current_path: &Path) {
    let mut parts = vec![];
    let mut path = current_path.to_path_buf();
    
    while let Some(name) = path.file_name() {
        parts.push(name.to_string_lossy().to_string());
        path.pop();
    }
    
    parts.reverse();
    let breadcrumbs = parts.join("/");
    println!("–¢–µ–∫—É—â–∏–π –ø—É—Ç—å: {}\n", breadcrumbs);
}

fn clear_screen() {
    print!("\x1B[2J\x1B[1;1H");
}

fn wait_for_enter() {
    print!("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...");
    io::stdout().flush().unwrap();
    let _ = io::stdin().read_line(&mut String::new());
}